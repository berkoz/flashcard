#!/usr/local/bin/python
import os
import sys

opts   = {
		'output'   : '/dev/stdout',
		'encoding' : 'utf-8'
}

files  = []
decks  = []

def usage():
	print """usage: mkdeck: [-o outfile] file1 file2
       -o    Specify the output file, stdout by default
       -e    Define the Python source encoding (PEP 0263), utf-8 by default
       -h    Show this help"""

def readable(path):
	return os.access(path, os.R_OK)

def check_read(*args):
	for f in args:
		if not readable(f):
			print "mkcard: " + f + " is not readable."
			sys.exit(1)

def line_count(path):
	with open(path) as f:
		for i, l in enumerate(f):
			pass
	return i + 1

def parse_args(args):
	end_args = False
	var_arg  = None
	for a in args:
		end_args = end_args or a == '--'
		if var_arg != None:
			if var_arg == '-o':
				opts['output'] = a
				var_arg = None
				continue
			if var_arg == '-e':
				opts['encoding'] = a
				var_arg = None
				continue
		if not end_args and a.startswith('-'):
			if a == '-h':
				usage()
				sys.exit()
			if a == '-o':
				var_arg = '-o'
				continue
			if a == '-e':
				var_arg = '-e'
				continue
			else:
				usage()
				sys.exit()
		else:
			if a != '--':
				files.append(a)
	if len(files) != 2:
		usage()
		sys.exit()

def read_decks(f1, f2):
	check_read(f1, f2)
	lines = line_count(f1)
	if lines != line_count(f2):
		print "flashcard: files must have the same number of lines."
		sys.exit(1)
	with open(f1) as f:
		decks.append(f.readlines())
	with open(f2) as f:
		decks.append(f.readlines())

def write_dict():
	with open(opts['output'], 'w') as f:
		print>>f, "# -*- coding: %s -*-" % opts['encoding']
		print>>f, "# Generated by mkdeck for flashcard"
		print>>f, ""
		print>>f, "{"
		
		lines = len(decks[0])
		for i in range(0, lines):
			if i == lines - 1:
				print>>f, "\t\"{0}\": \"{1}\"".format(decks[0][i].rstrip(),\
						decks[1][i].rstrip())
				continue
			print>>f, "\t\"{0}\": \"{1}\",".format(decks[0][i].rstrip(),\
					decks[1][i].rstrip())
		print>>f, "}"
		print>>f, ""
		print>>f, "# End of mkdeck output"

def main(args):
	parse_args(args)
	read_decks(files[0], files[1])
	write_dict()

if __name__ == '__main__':
 	main(sys.argv[1:])
