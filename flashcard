#!/usr/local/bin/python
import os
import sys
import random

opts = {
		'alternate' : False,
		'shuffle'   : False
}

C1   = '\033[92m'
C2   = '\033[94m'
C3   = '\033[95m'
ENDC = '\033[0m '

files  = []
decks  = []
unused = []

def usage():
	print "usage: flashcard: [-h] [-a] [-s] file1 file2\n\
           -h    Show this help\n\
           -s    Shuffle the deck\n\
           -a    Alternate the first side of the card to be shown, randomly"
def readable(path):
	return os.access(path, os.R_OK)
def line_count(path):
	with open(path) as f:
		for i, l in enumerate(f):
			pass
	return i + 1
def parse_args(args):
	for a in args:
		end_args = end_args or (a == '--')
		if not end_args and a.startswith('-'):
			if a == '-a':
				opts['alternate'] = True
				continue
			if a == '-s':
				opts['shuffle'] = True
				continue
			if a == '-h':
				usage()
				sys.exit()
			else:
				usage()
				sys.exit()
		else:
			if a != '--':
				files.append(a)
	if len(files) != 2:
		usage()
		sys.exit()
def read_decks(*args, **kwargs):
	format = "two-files"
	if "format" in kwargs:
		format = kwargs["format"]
	if format == "two-files":
		if len(args) != 2:
			print "flashcard: you must specify exactly two files in this format"
			sys.exit(1)
		for f in args:
			if not readable(f):
				print "flashcard: " + f + "is not readable."
				sys.exit(1)
		lines = line_count(args[0])
		if lines != line_count(args[1]):
			print "flashcard: files must have the same number of lines."
			sys.exit(1)
		with open(args[0]) as f: decks.append(f.readlines())
		with open(args[1]) as f: decks.append(f.readlines())
		return lines
def flashcards():
	while len(unused) != 0:
		c = unused[0]
		if opts['shuffle']:
			c = random.choice(unused)
		unused.remove(c)
		side = 1
		if opts['alternate']:
			side = random.choice([0, 1])
		try:
			if side == 1:
				print C1 + "Q:" + ENDC + decks[0][c - 1].rstrip()
				raw_input(C2 + "A:" + ENDC)
				print " " * 3 + C3 + decks[1][c - 1].rstrip() + ENDC + "\n"
			if side == 2:
				print C2 + "Q:" + ENDC + decks[1][c - 1].rstrip()
				raw_input(C1 + "A:" + ENDC)
				print " " * 3 + C3 + decks[0][c - 1].rstrip() + ENDC + "\n"
		except (KeyboardInterrupt, Exception):
			sys.exit(0)

def main(args):
	parse_args(args)
	lines = read_decks(*files, format="two-files")
	unused = range(1, lines + 1)
	flashcards()

if __name__ == '__main__':
	main(sys.argv[1:])
