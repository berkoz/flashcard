#!/usr/local/bin/python
import os
import sys
import random
import parser

opts = {
	'alternate' : False,
	'shuffle'   : False,
	'nocolor'   : False,
	'invert'    : False
}

class Color:
	c1   = '\033[92m'
	c2   = '\033[94m'
	c3   = '\033[95m'
	end  = '\033[0m '
	
	def disable(self):
		self.c1  = ''
		self.c2  = ''
		self.c3  = ''
		self.end = ' '

files = []
decks = []

def usage():
	print """usage: flashcard: [-h] [-s] [-a] [-n] [-i] file1 [file2]
           -h    Show this help
           -s    Shuffle the deck
           -a    Alternate the first side of the card to be shown, randomly
           -n    No color in output
           -i    Invert the order of sides of the card to be shown

If file2 is omitted, it is presumed that the file is in dictionary format."""

# On failure, returns the name of the first unreadable file in files
def readable(*files):
	for f in files:
		if not os.access(f, os.R_OK):
			return f
	return True

# Returns the number of lines in file f.
def line_count(f):
	with open(f) as f:
		for i, l in enumerate(f):
			pass
	return i + 1

# Get the options and filenames
def parse_args(args):
	end_args = False
	for a in args:
		end_args = end_args or a == '--'
		if not end_args and a.startswith('-'):
			if a == '-a':
				opts['alternate'] = True
				continue
			if a == '-s':
				opts['shuffle'] = True
				continue
			if a == '-n':
				opts['nocolor'] = True
				continue
			if a == '-i':
				opts['invert'] = True
				continue
			if a == '-h':
				usage()
				sys.exit()
			else:
				usage()
				sys.exit()
		else:
			if a != '--':
				files.append(a)
	if len(files) == 0:
		usage()
		sys.exit()

def read_decks(args, **kwargs):
	if len(args) == 1:
		format = "dictionary"
	if len(args) == 2:
		format = "two-files"
	if "format" in kwargs:
		format = kwargs["format"]

	if format == "two-files":
		t = readable(*args)
		if t != True:
			print "flashcard: " + t + " is not readable."
		lines = line_count(args[0])
		if lines != line_count(args[1]):
			print "flashcard: files must have the same number of lines."
			sys.exit(1)
		with open(args[0]) as f:
			decks.append(f.readlines())
		with open(args[1]) as f:
			decks.append(f.readlines())
		return lines

	if format == "dictionary":
		t = readable(*args)
		if t != True:
			print "flashcard: " + t + " is not readable."
		f = open(args[0])
		try:
			st   = parser.expr(f.read())
			code = st.compile('dict.py')
			deck = eval(code)
		except:
		 	print "flashcard: dictionary file contains errors"
		 	sys.exit(1)
		if not isinstance(deck, type({})):
			print "flashcard: dictionary file contains errors"
		 	sys.exit(1)
		decks.append(deck.keys())
		decks.append(deck.values())
		return len(deck.keys())
		
def flashcards(unused):
	t = Color()
	if opts['nocolor']:
		t.disable()
	
	while len(unused) != 0:
		c = unused[0]
		if opts['shuffle']:
			c = random.choice(unused)
		unused.remove(c)

		side = 0
		if opts['invert']:
			side = 1

		if opts['alternate']:
			side = random.choice([0, 1])

		try:
			if side == 0:
				print t.c1 + "Q:" + t.end + decks[0][c - 1]
				raw_input(t.c2 + "A:" + t.end)
				print " " * 3 + t.c3 + decks[1][c - 1] + t.end + "\n"
			if side == 1:
				print t.c2 + "Q:" + t.end + decks[1][c - 1]
				raw_input(t.c1 + "A:" + t.end)
				print " " * 3 + t.c3 + decks[0][c - 1] + t.end + "\n"
		# Silently quit on ^C or ^D.
		except (KeyboardInterrupt, EOFError):
			sys.exit(0)

def main(args):
	parse_args(args)
	lines = read_decks(files)
	unused = range(1, lines + 1)
	flashcards(unused)
if __name__ == '__main__':
 	main(sys.argv[1:])
